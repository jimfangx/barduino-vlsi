#!/usr/bin/env python3

from hammer.vlsi import CLIDriver, HammerTool, HammerDriver, HammerToolHookAction
from hammer.utils import get_or_else, optional_map
import hammer.tech as hammer_tech

from pathlib import Path
from typing import Dict, Callable, Optional, List

from hammer.technology.sky130 import SKY130Tech

import json

CHIPTOP_IO_NETS = [
    "reset",
    "clock",
    "jtag_TCK",
    "jtag_TMS",
    "jtag_TDI",
    "jtag_TDO",
    "custom_boot",
    "uart_0_txd",
    "uart_0_rxd",
    "serial_tl_clock_in",
    "serial_tl_in_valid",
    "serial_tl_out_bits_phi",
    "serial_tl_in_bits_phit",
    "serial_tl_in_ready",
    "serial_tl_out_valid",
    "serial_tl_out_ready",
    "qspi_0_cs_0",
    "qspi_0_sck",
    "qspi_0_dq_0",
    "qspi_0_dq_1",
    "qspi_0_dq_2",
    "qspi_0_dq_3",
    "gpio_iocell_1",
    "gpio_iocell_2",
    "gpio_iocell_3",
    "gpio_iocell_4",
    "gpio_iocell_5",
    "gpio_iocell_6",
    "gpio_iocell_7",
    "gpio_iocell_8",
    "gpio_iocell_9",
    "gpio_iocell_10",
    "gpio_iocell_11",
    "gpio_iocell_12",
    "gpio_iocell_13",
    "gpio_iocell_14",
    "gpio_iocell_15",
    "gpio_iocell_16",
    "gpio_iocell_17",
    "gpio_iocell_18",
    "gpio_iocell_19",
    "gpio_iocell_0",
    "VDDIO",
    "VDD",
    "VDDA",
    "VSS"
]

CHIPTOP_DONT_TOUCH_NETS = ["_commonIO_AMUXBUS_A_wire", "_commonIO_AMUXBUS_B_wire"]

def syn_design_effort(x: HammerTool) -> bool:
    # See: Genus Attribute Reference 21.1 - Specifies the global effort to use for all synthesis commands. By default (attribute is set to none)
    x.append(
    """
    set_db syn_global_effort high
    """
    )
    return True


# this is in STAC but last time all 3 of these options were used, it created some DRC issues
# so we are not using it for now
# Hammer flow defaults:
# design_cong_effort: not used
# place_global_confg_effort: high
# design_flow_effort: standard
def par_design_effort(x: HammerTool) -> bool:
    x.append(
    """
    set_db design_cong_effort high
    set_db place_global_cong_effort high
    set_db design_flow_effort extreme
    """
    )
    return True


def chiptop_dont_route(x: HammerTool) -> bool:
    for net in CHIPTOP_DONT_TOUCH_NETS:
      x.append(f"set_route_attributes -nets {net} -skip_routing true")
    return True

def chiptop_dont_touch(x: HammerTool) -> bool:
    x.append("set_dont_touch [get_nets {%s}] true" % " ".join(CHIPTOP_DONT_TOUCH_NETS))
    return True

def assign_chiptop_io_pins(x: HammerTool) -> bool:
    x.append(f'''
        set_promoted_macro_pin -insts *iocell -pins {{ P_PAD PAD }}
        set_promoted_macro_pin -insts clamp* -pins {{ VDDIO VSSD VCCD VSSA VDDA}}
        assign_io_pins -pins {{ {" ".join(CHIPTOP_IO_NETS)} }}
    ''')
    return True

def write_chiptop_drc_lvs_layout(x: HammerTool) -> bool:
    map_file = get_or_else(
        optional_map(x.get_gds_map_file(), lambda f: "-map_file {}".format(f)),
        ""
    )

    gds_files = x.technology.read_libs([
        hammer_tech.filters.gds_filter
    ], hammer_tech.HammerTechnologyUtils.to_plain_item)
    if x.hierarchical_mode.is_nonleaf_hierarchical():
        ilm_gds = list(map(lambda ilm: ilm.gds, x.get_input_ilms()))
        gds_files.extend(ilm_gds)

    # ONLY DIFFERENCE FROM HAMMER'S DEFAULT WRITE GDS:
    gds_files = list(filter(lambda x: "simple_por" not in x, gds_files))
    gds_files.append("/tools/C/rohankumar/sky130/stac_tapeout/gds/simple_por_drc_lvs.gds")

    merge_options = "-output_macros" if not x.get_setting("par.inputs.gds_merge") else "-uniquify_cell_names -merge {{ {} }}".format(
        " ".join(gds_files)
    )

    unit = ""
    if (x.get_setting("par.inputs.gds_precision_mode") == "manual"):
        gds_precision = x.get_setting("par.inputs.gds_precision") or ""
        valid_values = [100, 200, 1000, 2000, 10000, 20000]
        if gds_precision in valid_values:
            unit = "-unit %s" % gds_precision
        else:
            x.logger.error(
                "par.inputs.gds_precision value of \"%s\" must be one of %s" %(
                    gds_precision, ', '.join([str(x) for x in valid_values])));
            return False

    x.verbose_append(
        "write_stream -mode ALL -format stream {map_file} {merge_options} {unit} {gds}".format(
        map_file=map_file,
        merge_options=merge_options,
        gds=x.output_gds_filename.replace(".gds", "_drc_lvs.gds"),
        unit=unit
    ))
    return True

def write_chiptop_netlist_with_pg_pins(x: HammerTool) -> bool:
    x.append(f"write_netlist {x.output_netlist_filename} -top_module_first -top_module ChipTop -exclude_leaf_cells -phys -flat -exclude_insts_of_cells {{ sky130_fd_sc_hd__tap_1 sky130_fd_sc_hd__tap_2 sky130_fd_sc_hd__tapvgnd_1 sky130_fd_sc_hd__tapvpwrvgnd_1 sky130_fd_sc_hd__fill_1 sky130_fd_sc_hd__fill_2 sky130_fd_sc_hd__fill_4 sky130_fd_sc_hd__fill_8 sky130_fd_sc_hd__diode_2 sky130_ef_io__connect_vcchib_vccd_and_vswitch_vddio_and_vssio_vssa_vssd_slice_20um sky130_ef_io__com_bus_slice_10um sky130_ef_io__com_bus_slice_5um sky130_ef_io__com_bus_slice_1um sky130_ef_io__com_bus_slice_20um sky130_ef_io__corner_pad sky130_ef_io__connect_vcchib_vccd_and_vswitch_vddio_and_vssio_vssa_vssd_slice_20um }}")

    return True

def draw_areaidld(x: HammerTool) -> bool:
    x.append("create_shape -layer AREAIDLD -rect [get_db designs .core_bbox]")
    return True

def eco_changes(x: HammerTool) -> bool:
    # This is a place for ECO changes that are not in the original design
    # For example, if you want to change the size of a cell, you can do it here
    # or if you want to add a new cell, you can do it here
    # This is a place for manual changes that are not in the original design
    
    # in order to prevent DRC (metal spacing) violations at the SRAM ports when lowest routing layer is Met2 because by default, Vias will be stamped on top of ports (on M1) from Met1 -> Met2, which creates metal spacing violations between the vias on the ports - more details: https://ucb-bar.slack.com/archives/C04BT3QEW4C/p1751308674571229
    x.append("""
            set_db design_bottom_routing_layer met1
            route_eco -fix_drc -layer_range 1:2
            """)
    return True


def check_timing_intent(x: HammerTool) -> bool:
    x.append('check_timing_intent -verbose')
    return True

def dont_touch(x: HammerTool) -> bool:
    x.append('set_dont_touch [get_db insts -if {.base_cell.base_class == block}]')
    return True

def set_power_switching_activity(x: HammerTool) -> bool:
    # do this first thing, before par automatically calls report_power and power info gets into the logs
    if x.get_setting("vlsi.core.technology") == "hammer.technology.sky130" and \
       x.get_setting("vlsi.core.par_tool")   == "hammer.par.innovus" :
        x.append('''
                set_default_switching_activity -input_activity 0.5
                set_default_switching_activity -sequential_activity 0.5
                ''')
    return True

def write_power_estimates(x: HammerTool) -> bool:
    if x.get_setting("vlsi.core.technology") == "hammer.technology.sky130" and \
       x.get_setting("vlsi.core.par_tool")   == "hammer.par.innovus" :
        # set static power calculation
        # for `-period` flag: Specifies the default operating period (1/frequency). It is the period that the activity is referenced to. If not specified, the software uses the dominant clock in the design. The specified period will only be applied to nets that do not have reference clock (ref_clock) associated with the net.
        # innovus user guide pg 1428

        # dynamic vectorless: uses the timing arrival window information from a static timing analysis tool to determine when instances switch. A timing arrival window describes when a signal can change within a clock cycle. An additional algorithm then determines the instances that switch.
        x.append(
            f"""
            report_power -out_file power.rpt
            set_power_output_dir {x.run_dir}/power
            
            report_power_domains
            
            # === write static min/max corners ===
            # honor negative energy is on by default
            set_db power_method static 
            set_db power_write_db true 
            set_db power_corner max
            set_db power_report_library_usage true
            set_db power_write_static_currents true
            report_power -out_file static_corner-max.rpt
            
            set_db power_corner min
            report_power -out_file static_corner-min.rpt
            # may want to turn off VDD via off_pg_nets [different actual command but this is a good starting point to grep -- help * -category power]
            
            # === write dynamic vectorless ===
            set_db power_method dynamic_vectorless
            set_db power_enable_state_propagation true
            # set_db power_report_instance_switching_list state_prop_switching_list.rpt
            set_db power_corner min
            set_db power_write_static_currents false
            
            # can set current generation method to peak or avg
            set_db power_current_generation_method peak 
            
            # if true, control signals will be ignored when propagating activity
            set_db power_ignore_control_signals true
            
            report_power -out_file dynamic_vectorless_corner-min_current-gen-peak_no-ignore-ctrl-sigs.rpt
            
            set_db power_corner max
            report_power -out_file dynamic_vectorless_corner-max_current-gen-peak_no-ignore-ctrl-sigs.rpt
            
            set_db power_method static
        """
        )
    return True

def derate_srams(x: HammerTool) -> bool:
    if x.get_setting("vlsi.core.technology") == "hammer.technology.sky130" and x.get_setting("vlsi.core.par_tool") == "hammer.par.innovus" :
    # delays from STACv2: https://github.com/ucb-bar/stac-top/blob/2702197ccbf126e2d9a02abfa0c2a20f61d9cec2/vlsi/hammer-driver#L336-L343
        x.append(f'''
            set_timing_derate -cell_delay -delay_corner [get_db delay_corners *.setup_delay] -late 1.2 [get_db insts -if {{.base_cell.name == *sram22*}}]
            set_timing_derate -cell_delay -delay_corner [get_db delay_corners *.hold_delay] -late 0.9 [get_db insts -if {{.base_cell.name == *sram22*}}]
        ''')
    return True

def set_routing_layers(x: HammerTool) -> bool:
    if x.get_setting("vlsi.core.technology") == "hammer.technology.sky130" and \
       x.get_setting("vlsi.core.par_tool")   == "hammer.par.innovus" :
        # set global routing layers
        
        # OLD: setting to met1 caused too much congestion - 8/2/2025 jim
        # "cadence stdcells use met1 for routing and innovus would blow up trying to use it for global routing" - elam @ https://ucb-bar.slack.com/archives/C04BT3QEW4C/p1751308787319609?thread_ts=1751308674.571229&cid=C04BT3QEW4C
        # set_db design_bottom_routing_layer met1
        # set_db design_top_routing_layer met5
        
        # we use met2 as the most bottom global routing layer
        x.append("""
            set_db design_bottom_routing_layer met2
            set_db design_top_routing_layer met5
        """)
    return True

def enable_clock_antenna_insertion(x: HammerTool) -> bool:
    x.append('set_db route_design_diode_insertion_for_clock_nets true')
    return True

def add_fillers(x: HammerTool) -> bool:
    if x.get_setting("vlsi.core.technology") == "hammer.technology.sky130" and x.get_setting("vlsi.core.par_tool") == "hammer.par.innovus" :
        # x.add_fillers()  # call Innovus's default add_fillers step -- this was the old solution
    
        # gone due to https://canary.discord.com/channels/1166509154169520268/1356748669503803455/1403560846474346566
        # TLDR: FILL1 next to decap-fillers near the SRAM halo causes DRC violations (MR: Width of nwell: 0.84 um) as decap fillers extend into FILL1 - as a temp patch we fill with DECAP 16 in area of chip that is not near the SRAMs, then only use non-decap fills to fill in the rest of the gaps
        # we use DECAL16 only so that we don't exceed density + we enforce a density % target
        x.append('''
set_db add_fillers_cells "FILL_DECAP8 FILL_DECAP16 FILL1 FILL2 FILL4 FILL8 FILL16"
add_fillers -base_cells "FILL_DECAP16" -area "263 3415 3341 4936" -density 0.1
add_fillers -base_cells "FILL_DECAP16" -area "1512 300 3318 3500" -density 0.15
add_fillers -base_cells "FILL_DECAP16" -area "1010 300 1521 3024" -density 0.2
add_fillers -base_cells "FILL_DECAP16" -area "264 300 1030 819" -density 0.2
add_fillers -base_cells "FILL_DECAP16" -area "272 820 444 3455"
add_fillers -base_cells "FILL_DECAP16" -area "743 3090 1189 3394"
add_fillers -base_cells "FILL_DECAP16" -area "62 300 3541 600" -density 0.15
add_fillers -base_cells "FILL_DECAP16" -area "2818 660 3480 5033" -density 0.15
add_fillers -base_cells "FILL_DECAP16" -area "62 4372 2500 5082" -density 0.15
add_fillers -base_cells "FILL_DECAP16" -area "62 3380 772 4261" -density 0.15
set_db add_fillers_cells "FILL1 FILL2 FILL4 FILL8 FILL16"
add_fillers
        ''')
    return True

def signoff_timing(x: HammerTool) -> bool:
    if x.get_setting("vlsi.core.technology") == "hammer.technology.sky130" and \
       x.get_setting("vlsi.core.par_tool")   == "hammer.par.innovus" :
        x.append('''
# setup timing
time_design -sign_off
# hold timing
time_design -sign_off -hold
''')
    return True

# def write_top_files(x: HammerTool) -> bool:
#     if x.get_setting("vlsi.core.technology") == "sky130" and \
#        x.get_setting("vlsi.core.par_tool")   == "innovus" :
#         handoff_dir = f"{x.run_dir}/handoff"
#         x.append(f'''
# mkdir -p {handoff_dir}
# # LEF file
# write_lef_abstract -stripe_pins -pg_pin_layers met5 {handoff_dir}/{x.top_module}.lef

def drc_blackboxes(x: HammerTool) -> bool:
    modules = ['tdc_64']
    if x.get_setting("vlsi.core.drc_tool")   == "hammer.drc.calibre" :
        run_file = x.drc_run_file
        with open(run_file, "a") as f:
            for module in modules:
                f.write(f"\nEXCLUDE CELL {module}")
            f.write('\n')
    return True

def use_drc_lvs_gds(x: HammerTool) -> bool:
    x.layout_file = x.layout_file.replace("ChipTop.gds", "ChipTop_drc_lvs.gds")
    return True

def lvs_blackboxes(x: HammerTool) -> bool:
    modules = ["MultiPLLTop", "simple_por"]
    # modules = ['simple_por',
    #            'sky130_ef_io__vccd_lvc_clamped3_pad',
    #            'sky130_ef_io__vddio_hvc_clamped_pad',
    #            'sky130_ef_io_vssd_lvc_clamped3_pad',
    #            'sky130_ef_io__vdda_hvc_clamped_pad',
    #            'sky130_ef_io__vssa_hvc_clamped_pad',
    #            'sky130_ef_io__analog_pad_esd2',
    #            'sky130_ef_io__vssio_hvc_clamped_pad']
    # NOTE: adding unrecognized devices here didn't work (e.g. SKY130_FD_PR__PFET_G5V0D10V5)
    if x.get_setting("vlsi.core.lvs_tool")   == "hammer.lvs.calibre" :
        run_file = x.lvs_run_file
        with open(run_file, "a") as f:
            for module in modules:
                f.write(f"\nLVS BOX {module}")
                f.write(f"\nLVS FILTER {module} OPEN")
            f.write('\n')
    return True

def donttouch_iocells(x: HammerTool) -> bool:
    x.append('set_dont_touch [get_db insts -if {.base_cell.name == sky130_ef_io__*}] true')
    return True

def flatten_analog_driver(x: HammerTool) -> bool:
    # AnalogDriver is a kludge to get FIRRTL to understand how to connect nets
    # together, they should get dissolved
    x.append('ungroup [get_db hinsts -if {.module.name == AnalogDriver*}]')
    return True

def set_die_snap_to_mfg_grid(x: HammerTool) -> bool:
    x.append('set_db floorplan_snap_die_grid manufacturing')
    return True

def force_bias_pins_nets(x: HammerTool) -> bool:
    x.append('''
connect_global_net VDDIO -netlist_override -power_domain HV -pin_base_name VPB -type pg_pin -verbose
connect_global_net VDD -netlist_override -power_domain AO -pin_base_name VPB -type pg_pin -verbose
connect_global_net VSS -netlist_override -power_domain HV -pin_base_name VNB -type pg_pin -verbose
connect_global_net VSS -netlist_override -power_domain AO -pin_base_name VNB -type pg_pin -verbose
''')
    return True

def efabless_ring_io(ht: HammerTool) -> bool:
    # Copied from Harrison's version in hammer to make some adjustments:
    # - global connections removed - now handled by CPF
    # - add fixing of IO fillers
    io_file = ht.get_setting("technology.sky130.io_file")
    ht.append(f"read_io_file {io_file} -no_die_size_adjust")
    p_nets = list(map(lambda s: s.name, ht.get_independent_power_nets()))
    g_nets = list(map(lambda s: s.name, ht.get_independent_ground_nets()))
    # TODO: put only a few supply tie cells instead of replacing all 20um?
    ht.append('''

# IO fillers
#set io_fillers {sky130_ef_io__com_bus_slice_20um sky130_ef_io__com_bus_slice_10um sky130_ef_io__com_bus_slice_5um sky130_ef_io__com_bus_slice_1um}
# Use slices connecting VCCHIB<>VCCD and VSWITCH<>VDDA and VSSIO<>VSSA<>VSSD
set io_fillers {sky130_ef_io__connect_vcchib_vccd_and_vswitch_vddio_and_vssio_vssa_vssd_slice_20um sky130_ef_io__com_bus_slice_10um sky130_ef_io__com_bus_slice_5um sky130_ef_io__com_bus_slice_1um}
add_io_fillers -prefix IO_FILLER -io_ring 1 -cells $io_fillers -side top -filler_orient r0
add_io_fillers -prefix IO_FILLER -io_ring 1 -cells $io_fillers -side right -filler_orient r270
add_io_fillers -prefix IO_FILLER -io_ring 1 -cells $io_fillers -side bottom -filler_orient r180
add_io_fillers -prefix IO_FILLER -io_ring 1 -cells $io_fillers -side left -filler_orient r90
# Fix placement
set io_filler_insts [get_db insts IO_FILLER_*]
set_db $io_filler_insts .place_status fixed
''')
    # FIXME: do something better than hardcoding CPF path
    ht.append("""
# Reload CPF to assign domains to just-placed physical-only cells
read_power_intent -cpf power_spec.cpf
commit_power_intent
""")
    # bias pins not respected for some reason
    force_bias_pins_nets(ht)
    ht.append(f'''
# Core ring
add_rings -follow io -layer met5 -nets {{ {p_nets[0]} {g_nets[0]} }} -offset 5 -width 13 -spacing 3
route_special -connect pad_pin -nets {{ {p_nets[0]} {g_nets[0]} }} -detailed_log
''')
    ht.append('''
# Prevent buffering on TIE_LO_ESD and TIE_HI_ESD
set_dont_touch [get_db [get_db pins -if {.name == *TIE*ESD}] .net]
''')
    return True

def route_ties(x: HammerTool) -> bool:
    x.append('''
select_net [get_db [get_db pins -if {.name == */TIE_* && .base_pin.base_cell.name == sky130_*}] .net]
route_design -selected
deselect_net *
''')
    return True


def load_hv_def_routing(x: HammerTool) -> bool:
    def_path = x.get_setting("design.def.hv_routing")
    x.append(f'read_def {def_path}')
    return True

def connect_core_stripes(x: HammerTool) -> bool:
    x.append('''
route_special -connect floating_stripe -floating_stripe_target ring -nets {VDD VSS} -stripe_layer_range {met4 met5} -allow_jogging 0 -layer_change_range {met3 met5} -crossover_via_layer_range {met3 met5} -detailed_log
''')
    return True

class Driver(CLIDriver):
    def get_extra_synthesis_hooks(self) -> List[HammerToolHookAction]:
        return [
            HammerTool.make_post_insertion_hook("init_environment", check_timing_intent),
            HammerTool.make_post_insertion_hook("init_environment", dont_touch),
            HammerTool.make_post_insertion_hook("init_environment", donttouch_iocells),
            HammerTool.make_pre_insertion_hook("syn_generic", derate_srams),
            HammerTool.make_pre_insertion_hook("syn_generic", flatten_analog_driver),
            # HammerTool.make_pre_insertion_hook("syn_generic", chiptop_dont_touch), # we dont use _commonIO_AMUXBUS_A_wire, _commonIO_AMUXBUS_B_wire in Barduino design itself (only in IO ring, which isn't added until during par), so commenting this hook out 
                        
            HammerTool.make_pre_insertion_hook("syn_generic", syn_design_effort),
        ]

    def get_extra_par_hooks(self) -> List[HammerToolHookAction]:
        return [
            # HammerTool.make_persistent_hook(set_power_switching_activity), # set the default switching activity -- we aren't worried about power reports yet -- 8/21/2025, jim -- this was mainly for TVIP a while back when they wanted some PPA estimates
            
            HammerTool.make_removal_hook("place_bumps"),
            HammerTool.make_post_insertion_hook("place_pins", assign_chiptop_io_pins),
            HammerTool.make_removal_hook("place_pins"),
            
            HammerTool.make_pre_insertion_hook("place_opt_design", derate_srams),
            
            HammerTool.make_post_insertion_hook("init_design", set_routing_layers),
            
            # move fillers step to after opt_design
            HammerTool.make_removal_hook("add_fillers"),
            HammerTool.make_post_insertion_hook("opt_design", add_fillers),
            
            # # write final files
            # HammerTool.make_post_insertion_hook("write_design", write_top_files),
            
            # HammerTool.make_pre_insertion_hook("floorplan_design", par_design_effort), # see comments in par_design_effort() for why this is not used
            HammerTool.make_pre_insertion_hook("floorplan_design", set_die_snap_to_mfg_grid),
            HammerTool.make_pre_insertion_hook("floorplan_design", chiptop_dont_route), # _commonIO_AMUXBUS_A_wire, _commonIO_AMUXBUS_B_wire are in IO cells - so we dont route them before efabless_ring_io
            HammerTool.make_pre_insertion_hook("floorplan_design", chiptop_dont_touch), # _commonIO_AMUXBUS_A_wire, _commonIO_AMUXBUS_B_wire are in IO cells - so we dont route them before efabless_ring_io
            # HammerTool.make_post_insertion_hook("floorplan_design", write_power_estimates), # no proper power reports needed for barduino as of 8/21/2025, jim
            HammerTool.make_post_insertion_hook("floorplan_design", efabless_ring_io),
            # HammerTool.make_post_insertion_hook("floorplan_design", floorplan_sram_macros), # sram placement handled by design-ofo.yaml, elaborated tcl in floorplan.tcl
            HammerTool.make_post_insertion_hook("efabless_ring_io", load_hv_def_routing),
            HammerTool.make_post_insertion_hook("power_straps", connect_core_stripes),
            
            HammerTool.make_pre_insertion_hook("write_design", force_bias_pins_nets),
            HammerTool.make_pre_insertion_hook("write_design", draw_areaidld),
            HammerTool.make_pre_insertion_hook("write_design", eco_changes),
            HammerTool.make_post_insertion_hook("write_design", write_chiptop_netlist_with_pg_pins),
            HammerTool.make_post_insertion_hook("write_design", write_chiptop_drc_lvs_layout),
            # add final signoff timing
            # TODO: re-add once we care about timing (DRC/LVS sane)
            HammerTool.make_pre_insertion_hook("write_design", signoff_timing),
            
            HammerTool.make_post_insertion_hook("sky130_innovus_settings", enable_clock_antenna_insertion),
            
            # Not needed with manual CPF flow
            HammerTool.make_removal_hook("sky130_connect_nets"),
            HammerTool.make_removal_hook("sky130_connect_nets2"),
        ]

    def get_extra_drc_hooks(self) -> List[HammerToolHookAction]:
        return []
        # TODO: these are calibre specific, pegasus doesn't have this step name
        return [
            HammerTool.make_pre_insertion_hook("generate_drc_run_file", use_drc_lvs_gds),
            # HammerTool.make_post_insertion_hook("generate_drc_run_file", drc_blackboxes)
        ]
    def get_extra_lvs_hooks(self) -> List[HammerToolHookAction]:
        # TODO: these are calibre specific, pegasus doesn't have this step name
        return []
        return [
            HammerTool.make_pre_insertion_hook("generate_lvs_run_file", use_drc_lvs_gds),
            # HammerTool.make_post_insertion_hook("generate_lvs_run_file", lvs_blackboxes)
        ]

if __name__ == '__main__':
    Driver().main()
